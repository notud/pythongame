#德州扑克
import random

#公共牌
public=[]

#玩家数
playernumber=3

#普通扑克牌
class Card:
    def __init__(self, number):
#编号
        self.number = number
#花色
        if self.number == 54:
            self.flower = '大王'
        elif self.number == 53:
            self.flower = '小王'
        elif 39 < self.number < 53:
            self.flower = '黑桃'
        elif 26 < self.number < 40:
            self.flower = '红桃'
        elif 13 < self.number < 27:
            self.flower = '梅花'
        elif 0 < self.number < 14:
            self.flower = '方块'
#数字
        if number < 53:
            self.num = number % 13
        if self.num == 0:
            self.num = 13
#A比较大
        if self.num == 1:
            self.num = 14
#小王
        elif number == 53:
            self.num = 14
#大王
        elif number == 54:
            self.num = 15

    def __str__(self):
        if self.number < 53 and 1 < self.num < 11:
            return str(self.flower)+str(self.num)
        elif self.number < 53 and self.num == 11:
            return str(self.flower)+'J'
        elif self.number < 53 and self.num == 12:
            return str(self.flower)+'Q'
        elif self.number < 53 and self.num == 13:
            return str(self.flower)+'K'
        elif self.number < 53 and self.num == 14:
            return str(self.flower)+'A'
        else:
            return str(self.flower)

    def getnum(self):
        return self.num


#德州扑克（去掉大小王）
class Dezhoucard(Card):

    def __init__(self,number):
        super().__init__(number)

# 胜利条件判断
    def success(playercard,publiccard):
        a1=Dezhoucard(playercard[0])
        a2=Dezhoucard(playercard[1])
        a3=Dezhoucard(publiccard[0])
        a4=Dezhoucard(publiccard[1])
        a5=Dezhoucard(publiccard[2])
        a6=Dezhoucard(publiccard[3])
        a7=Dezhoucard(publiccard[4])

        list=[a1.num,a2.num,a3.num,a4.num,a5.num,a6.num,a7.num]
        list.sort()
        list.reverse()
        list2=[a1.flower,a2.flower,a3.flower,a4.flower,a5.flower,a6.flower,a7.flower]
        list3 = [a1.num, a2.num, a3.num, a4.num, a5.num,a6.num,a7.num]
        meihua=list2.count('梅花')
        hongtao=list2.count('红桃')
        heitao=list2.count('黑桃')
        fangkuai=list2.count('方块')
        number1 = list3.count(14)
        number2 = list3.count(2)
        number3 = list3.count(3)
        number4 = list3.count(4)
        number5 = list3.count(5)
        number6 = list3.count(6)
        number7 = list3.count(7)
        number8 = list3.count(8)
        number9 = list3.count(9)
        number10 = list3.count(10)
        number11 = list3.count(11)
        number12 = list3.count(12)
        number13 = list3.count(13)
        listnumber=[number1,number2,number3,number4,number5,number6,number7,number8,number9,number10,number11,number12,number13]
        listnumber.sort()
        listnumber.reverse()
        lingshi=[]
# 皇家同花顺
        if (meihua==5 or heitao==5 or hongtao==5 or fangkuai==5)and(list[0]==14 and list[1]==13 and list[2]==12 and
        list[3] and list[4]==10):
            return 10
#同花顺
        if meihua==5:
            for j in range(5):
                i=list2.index('梅花')
                list2.pop(i)
                lingshi.append(list3.pop(i))
            lingshi.sort()
            lingshi.reverse()
            if (lingshi[0]==lingshi[1]+1) and (lingshi[1]==lingshi[2]+1) and (lingshi[2]==lingshi[3]+1) and (lingshi[3]==lingshi[4]+1):
                return 9

        elif heitao==5:
            for j in range(5):
                i=list2.index('黑桃')
                list2.pop(i)
                lingshi.append(list3.pop(i))
            lingshi.sort()
            lingshi.reverse()
            if (lingshi[0] == lingshi[1] + 1) and (lingshi[1] == lingshi[2] + 1) and (lingshi[2] == lingshi[3] + 1) and (lingshi[3] == lingshi[4] + 1):
                return 9

        elif hongtao == 5:
            for j in range(5):
                i=list2.index('红桃')
                list2.pop(i)
                lingshi.append(list3.pop(i))
            lingshi.sort()
            lingshi.reverse()
            if (lingshi[0] == lingshi[1] + 1) and (lingshi[1] == lingshi[2] + 1) and (lingshi[2] == lingshi[3] + 1) and (lingshi[3] == lingshi[4] + 1):
                return 9

        elif fangkuai == 5:
            for j in range(5):
                i=list2.index('方块')
                list2.pop(i)
                lingshi.append(list3.pop(i))
            lingshi.sort()
            lingshi.reverse()
            if (lingshi[0] == lingshi[1] + 1) and (lingshi[1] == lingshi[2] + 1) and (lingshi[2] == lingshi[3] + 1) and (lingshi[3] == lingshi[4] + 1):
                return 9
#四条
        if listnumber[0] == 4:
            return 8
#葫芦
        if listnumber[0] == 3 and listnumber[1] == 2:
            return 7
#同花
        if meihua == 5 or heitao == 5 or hongtao == 5 or fangkuai == 5:
            return 6
#顺子
        if (list[0] == list[1]+1 and list[1] == list[2]+1 and list[2] == list[3]+1 and list[3]==list[4]+1) or\
        (list[1] == list[2] + 1 and list[2] == list[3] + 1 and list[3] == list[4] + 1 and list[4] == list[5] + 1) or \
        (list[2] == list[3] + 1 and list[3] == list[4] + 1 and list[4] == list[5] + 1 and list[5] == list[6] + 1):
            return 5
#三条
        if listnumber[0] == 3:
            return 4
#两对
        if listnumber[0] == listnumber[1] == 2:
            return 3
#对子
        if (number1 == 2 or number2 == 2 or number3 == 2 or number4 == 2 or number5 == 2 or number6 == 2 or number7 == 2\
            or number8 == 2 or number9 == 2 or number10 == 2 or number11 == 2 or number12 == 2 or number13 == 2):
            return 2
#高牌
        else:
            return 1


#随机发牌(玩家人数，每位玩家手牌数)
def submit(playernumber, cardnumber):
    cardnow = 52
#列表
    player = []
    nowplayer = []
    card = list(range(1, 53))
    for i in range(1, playernumber+1):
        if i != 1:
            player.append(nowplayer)
            nowplayer = []
        for j in range(1, cardnumber+1):
            b = random.randint(0, cardnow-1)
            nowplayer.append(card.pop(b))
            cardnow -= 1
    player.append(nowplayer)
    for i in range(5):
        b = random.randint(0, cardnow-1)
        public.append(card.pop(b))
        cardnow -= 1
    return player

#查找第n个m
def find(build,m,n):
    now = 0
    right = 0
    while now < len(build) and right < n:
        if build[now] == m:
            right += 1
        now += 1
    now -= 1
    return now

#playernumber个人玩

allplayer = submit(playernumber, 2)
a = 0
b = 0
#发牌
for a in range(playernumber):
    print("\n"+"玩家"+str(a+1))
    for b in range(2):
        print(str(Dezhoucard(allplayer[a][b]))+' ',end="")
print('\n公共牌为')
for c in range(5):
    print(str(Dezhoucard(public[c])), end=" ")
print('\n', end=' ')
playersuccess=[]
playersuccess2=[]
#记录牌型
for i in range(playernumber):
    playersuccess.append(Dezhoucard.success(allplayer[i],public))
    playersuccess2.append(Dezhoucard.success(allplayer[i],public))

#记录牌的数字大小
playercardnumber1=[]
playercardnumber2=[]
for a in range(playernumber):
    if a != 0:
        playercardnumber1.append(playercardnumber2)
        playercardnumber2 = []
    for b in range(2):
        playercardnumber2.append(Dezhoucard(allplayer[a][b]).getnum())
playercardnumber1.append(playercardnumber2)

for a in range(playernumber):
    for c in range(5):
        playercardnumber1[a].append(Dezhoucard(public[c]).getnum())

playersuccess.sort()
playersuccess.reverse()
#排序过的success


#比牌型
if playersuccess[0] > playersuccess[1]:
    print("胜利者是第"+str(playersuccess2.index(playersuccess[0])+1)+'位玩家')

#比牌的大小
else:
    i = playersuccess.count(playersuccess[0])
#有i个相同牌型
    j = 0
    playersuccess3 = []#记录评判的玩家的牌号
    playersuccess4 = []#记录评判的玩家序号
    playersuccessnow = []
    k = 0
    for j in range(i):
        k = find(playersuccess2, playersuccess[0], j + 1)
        if j != 0:
            playersuccess3.append(playersuccessnow)
            playersuccessnow = []
        for a in range(7):
            playersuccessnow.append(playercardnumber1[k][a])
        playersuccess4.append(k)
    playersuccess3.append(playersuccessnow)
    j = 0

#同花顺(找最大牌)
    if playersuccess[0] == 9:
        while j < i-1:
            playersuccess3[j].sort()
            playersuccess3[j].reverse()
            j += 1
        flag = 0
        j = 0
        while j < i:
            if playersuccess3[j] < playersuccess3[j+1]:
                flag = j+1
            j += 1
        print("胜利者是第"+str(playersuccess4[flag]+1)+'位玩家')

#四条
    elif playersuccess[0] == 8:
        max1 = []
        max2 = []
        max3 = [0]
        # 记录四条大小
        for a in range(playernumber):
            if a != 0:
                max1.append(max3[0])
                max2.append(max3[0])
            max3=[0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 4:
                    max3.pop()
                    max3.append(b)#记录四条大小
        max1.append(max3[0])
        max2.append(max3[0])
        max1.sort()
        max1.reverse()
        #最大的四条
        if max1[0] > max1[1]:
            print("胜利者是第" + str(max2.index(max1[0])+1) + '位玩家')
        else:  #四条相同
            q = max1.count(max1[0])  # q个相同对子
            playerlast = []
            playerlast2 = []
            for j in range(q):
                k = find(max2, max1[0], j)
                playerlast.append(playersuccess3[k])
                playerlast2.append(k)
            for j in range(q):
                playerlast[j].sort()
                playerlast[j].reverse()
            # 相同对子
            flag = 0
            for j in range(q - 1):
                if playerlast[j] < playerlast[j + 1]:
                    flag = j + 1
                print(flag)
            print("胜利者是第" + str(playerlast2[flag]+1) + '位玩家')

#葫芦
    elif playersuccess[0] == 7:
        max1 = []
        max2 = []
        max3 = [0]
        # 记录三条大小
        for a in range(playernumber):
            if a != 0:
                max1.append(max3[0])
                max2.append(max3[0])
            max3=[0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 3:
                    max3.pop()
                    max3.append(b)  # 记录对子大小
        max1.append(max3[0])
        max2.append(max3[0])
        max1.sort()
        max1.reverse()
        max4 = []
        max5 = []
        max6 = [0]
        # 记录三条大小
        for a in range(playernumber):
            if a != 0:
                max4.append(max6[0])
                max5.append(max6[0])
            max6=[0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 3:
                    max6.pop()
                    max6.append(b)  # 记录对子大小
        max4.append(max6[0])
        max5.append(max6[0])
        max4.sort()
        max4.reverse()
        # 最大的三条
        if max1[0] > max1[1]:
            print("胜利者是第" + str(max2.index(max1[0]) + 1) + '位玩家')
        elif max4[0] > max4[1]:
            print("胜利者是第" + str(max5.index(max4[0]) + 1) + '位玩家')

#同花
    elif playersuccess[0] == 6:
        for j in range(i):
            playersuccess3[j].sort()
            playersuccess3[j].reverse()
        flag = 0
        j = 0
        while j < i - 1:
            if playersuccess3[j] < playersuccess3[j + 1]:
                flag = j + 1
            j += 1
        print("胜利者是第" + str(playersuccess4[flag]+1) + '位玩家')


# 顺子
    elif playersuccess[0] == 5:
        for j in range(i):
            playersuccess3[j].sort()
            playersuccess3[j].reverse()
        flag = 0
        j = 0
        while j < i - 1:
            if playersuccess3[j] < playersuccess3[j + 1]:
                flag = j + 1
            j += 1
        print("胜利者是第" + str(playersuccess4[flag]+1) + '位玩家')

#三条
    elif playersuccess[0] == 4:
        max1 = []
        max2 = []
        max3 = [0]
        # 记录三条大小
        for a in range(playernumber):
            if a != 0:
                max1.append(max3[0])
                max2.append(max3[0])
            max3=[0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 3:
                    max3.pop()
                    max3.append(b)  # 记录对子大小
        max1.append(max3[0])
        max2.append(max3[0])
        max1.sort()
        max1.reverse()
        # 最大的三条
        if max1[0] > max1[1]:
            print("胜利者是第" + str(max2.index(max1[0]) + 1) + '位玩家')
        else:  # 三条相同
            q = max1.count(max1[0])  # q个相同对子
            playerlast = []
            playerlast2 = []
            for j in range(q):
                k = find(max2, max1[0], j)
                playerlast.append(playersuccess3[k])
                playerlast2.append(k)
            for j in range(q):
                playerlast[j].sort()
                playerlast[j].reverse()
            # 相同对子
            flag = 0
            for j in range(q - 1):
                if playerlast[j] < playerlast[j + 1]:
                    flag = j + 1
            print("胜利者是第" + str(playerlast2[flag]+1) + '位玩家')

# 两对
    elif playersuccess[0] == 3:
        max1 = []
        max2 = []
        max3 = [0]
        max4 = []
        max5 = []
        max6 = [0]
        # 记录对子大小
        for a in range(playernumber):
            if a != 0:
                max1.append(max3[0])
                max2.append(max3[0])
                max4.append(max6[0])
                max5.append(max6[0])
            max3=[0]
            max6=[0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 2:
                    max6.pop()
                    max6.append(max3.pop())
                    max3.append(b)  # 记录对子大小
        max1.append(max3[0])
        max2.append(max3[0])
        max4.append(max6[0])
        max5.append(max6[0])
        max1.sort()
        max1.reverse()
        max4.sort()
        max4.reverse()
        # 最大的对子
        if max1[0] > max1[1]:
            print("胜利者是第" + str(max2.index(max1[0])+1) + '位玩家')
        elif max1[0] <= max1[1] and max4[0] > max4[1]:
            print("胜利者是第" + str(max5.index(max4[0])+1) + '位玩家')
        else:  # 对子相同
            playerlast = []
            playerlast2 = []
            q = max5.count(max4[0])  # q个相同对子
            for a in range(i):
                if (playersuccess3[a].count(max4[0]) == 2) and (playersuccess3[a].count(max1[0]) == 2):
                    playerlast.append(playersuccess3[a])
                    playerlast2.append(a)
            for j in range(q):
                playerlast[j].sort()
                playerlast[j].reverse()
            flag = 0
            j = 0
            while j < q - 1:
                if playerlast[j] < playerlast[j + 1]:
                    flag = j + 1
                j += 1
            print("胜利者是第" + str(playerlast2[flag]+1) + '位玩家')

# 对子
    elif playersuccess[0] == 2:
        max1 = []
        max2 = []
        max3 = [0]
        # 记录对子大小
        for a in range(playernumber):
            if a != 0:
                max1.append(max3[0])
                max2.append(max3[0])
            max3 = [0]
            for b in range(2, 15):
                if playercardnumber1[a].count(b) == 2:
                    max3.pop()
                    max3.append(b)#记录对子大小
        max1.append(max3[0])
        max2.append(max3[0])
        max1.sort()
        max1.reverse()
        #最大的对子
        if max1[0] > max1[1]:
            print("胜利者是第" + str(max2.index(max1[0])+1) + '位玩家')
        else:  #对子相同
            q = max1.count(max1[0])#q个相同对子
            playerlast=[]
            playerlast2=[]
            for j in range(q):
                k = find(max2, max1[0], j)
                playerlast.append(playersuccess3[k])
                playerlast2.append(k)
            for j in range(q):
                playerlast[j].sort()
                playerlast[j].reverse()
        #相同对子
            flag = 0
            for j in range(q-1):
                if playerlast[j] < playerlast[j + 1]:
                    flag = j + 1
            print("胜利者是第" + str(playerlast2[flag]+1) + '位玩家')


#高牌
    elif playersuccess[0] == 1:
        for j in range(i):
            playersuccess3[j].sort()
            playersuccess3[j].reverse()
        flag = 0
        j = 0
        while j < i-1:
            if playersuccess3[j] < playersuccess3[j + 1]:
                flag = j + 1
            j += 1
        print("胜利者是第" + str(playersuccess4[flag]+1) + '位玩家')

